========================
SQLAlchemy-FoundationDB
========================

SQLAlchemy-FoundationDB provides a SQLAlchemy dialect for the FoundationDB
SQL Layer, as well as
a Core/ORM extension library allowing direct control of FoundationDB SQL nested
SELECT statements and result sets.

Requirements
============

SQLAlchemy-FoundationDB depends on:

* `fdb-sql <https://github.com/FoundationDB/sql-layer-adapter-dbapi>`_ - this
  is an extension for the psycopg2 DBAPI, in order to provide nested result support.

* SQLAlchemy 0.9.2 - The FoundationDB dialect relies on various API
  features that have been added throughout 0.8 and 0.9, and in particular
  requires 0.9.2 for proper support of a "grouped" foreign key.

Connecting
==========

Connect format is similar to that of a regular Postgresql database::

    from sqlalchemy import create_engine

    engine = create_engine("sqlalchemy_foundationdb+psycopg2://@localhost:15432/")

The ``Engine`` above will produce connections when the ``Engine.connect``
method is called.

Nested Result Sets
==================

The dialect introduces a new type called ``NestedResult``, the value of
which is a new SQLAlchemy ``ResultProxy`` representing a nested result::

    with engine.begin() as conn:
        result = conn.execute(
                    "SELECT customer.id, "
                    "(SELECT order.id, order.data "
                    "FROM order "
                    "WHERE customer_id=customer.id) AS order "
                    "FROM customer")
        for row in result:
            print "customer id:", row['id']
            for order_row in row['order']:
                print "order id:", order_row['id']
                print "order data:", order_row['data']

DDL Integration
===============

At the core of FoundationDB SQL's nested result set capability is the
"grouped foreign key".   This is a FOREIGN KEY construct which includes
the "GROUPING" keyword.  To render this DDL, use the ``foundationdb_grouping=True``
keyword argument on either ``ForeignKeyConstraint`` or ``ForeignKey``::

    from sqlalchemy import MetaData, Table, Column, String, Integer, ForeignKey
    metadata = MetaData()
    customer = Table('customer',
        metadata,
        Column('id', Integer, primary_key=True),
        Column('name', String(20)),
    )

    order = Table('order',
        metadata,
        Column('id', Integer, primary_key=True),
        Column('customer_id', Integer,
                    ForeignKey('customer.id', foundationdb_grouping=True)),
        Column('order_info', String(20)),
    )

    metadata.create_all(conn)

Will emit DDL like::

    CREATE TABLE customer (
        id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
        name VARCHAR(20) NULL,
        PRIMARY KEY (id)
    )

    CREATE TABLE "order" (
        id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
        customer_id INTEGER NULL,
        order_info VARCHAR(20) NULL,
        PRIMARY KEY (id),
        GROUPING FOREIGN KEY(customer_id) REFERENCES customer (id)
    )


Nested Select Constructs
========================

Moving up a level, the dialect introduces a new Core construct ``nested``
which is an extension of SQLAlchemy's "scalar select" construct.   This construct is
a drop-in replacement for a standard ``select()`` subquery, and is a marker
intercepted by the FoundationDB dialect indicating that column and typing information about
a "nested result" should be carried over from statement to result set::

    from sqlalchemy import select
    from sqlalchemy_foundationdb import nested

    sub_stmt = nested([order]).where(order.c.customer_id
                                            == customer.c.id).label('o')
    stmt = select([sub_stmt]).where(customer.c.id == 1)

    result = conn.execute(stmt)

The above will produce SQL like the following::

    SELECT
        (SELECT "order".id, "order".customer_id,
                "order".order_info
        FROM "order" WHERE "order".customer_id =
        customer.id) AS o
    FROM customer WHERE customer.id = %(id_1)s

Within the result set, nested columns will be targetable not just by column name but
also by column object, and any SQLAlchemy-side type converters in place will take effect for these
columns::

        for row in result:
            print "customer id:", row[customer.c.id]
            for order_row in row['order']:
                print "order id:", order_row[order.c.id]
                print "order data:", order_row[order.c.data]

ORM Integration
===============

SQLAlchemy-FoundationDB includes ORM extensions, importable from the ``sqlalchemy_foundationdb.orm`` package.

Nested Eager Loading
--------------------

The ``orm.nestedload()`` and ``orm.nestedload_all()`` provide relationship eager loading
making usage of an embedded nested result.  These are used just like SQLAlchemy's own
``orm.joinedload()`` and ``orm.subqueryload()`` functions::

    from sqlalchemy.orm import relationship, Session
    from sqlalchemy.ext.declarative import declarative_base
    from sqlalchemy_foundationdb import orm

    Base = declarative_base()

    class Customer(Base):
        __table__ = customer
        orders = relationship("Order")

    class Order(Base):
        __table__ = order


    sess = Session(engine)

    for customer in sess.query(Customer).options(orm.nestedload(Customer.orders)):
        print "customer:", customer.name
        print "orders:", customer.orders

Explicit Nesting
----------------

The ``orm.orm_nested()`` function acts just like the core ``nested()`` construct,
except that it is ORM-aware and accepts a ``Query`` object; it will invoke
``Query`` style loading, nested into the tuples returned by ``Query``::

        sess = Session()

        n = orm.orm_nested(sess.query(Order.id, Order).filter(Customer.orders))

        q = sess.query(Customer, n).filter(Customer.id == 1)

        for customer, orders in q:
            print "customer:", customer.name
            print "orders:", orders

Above, we're taking advantage of a new convenience feature in SQLAlchemy 0.8, which is that
we can pass the ``Customer.orders`` class-level attribute directly to ``Query.filter()``
in order to generate a correlated WHERE clause.   Alternatively, we could just spell this out::

    query.filter(Customer.id==Order.customer_id)





